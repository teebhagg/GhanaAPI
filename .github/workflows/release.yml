name: Create Release

on:
  push:
    branches:
      - main
    paths:
      - "backend/package.json"

permissions:
  contents: write
  pull-requests: read
  statuses: write
  actions: read

jobs:
  check-version-change:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      new-version: ${{ steps.version-check.outputs.version }}
      previous-version: ${{ steps.version-check.outputs.previous-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: version-check
        run: |
          # Get current version from backend/package.json
          CURRENT_VERSION=$(jq -r '.version' backend/package.json)
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Get previous version from the previous commit
          PREVIOUS_VERSION=$(git show HEAD~1:backend/package.json | jq -r '.version')
          echo "previous-version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT

          # Check if version changed
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Version unchanged: $CURRENT_VERSION"
          fi

  create-release:
    needs: check-version-change
    if: needs.check-version-change.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "backend/package-lock.json"

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run tests
        working-directory: ./backend
        run: |
          npm run test
          npm run test:e2e

      - name: Build backend
        working-directory: ./backend
        run: npm run build

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.check-version-change.outputs.new-version }}"
          PREVIOUS_VERSION="${{ needs.check-version-change.outputs.previous-version }}"

          # Create a changelog from git commits between versions
          echo "## What's Changed" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          # Get commits since last version tag (if it exists) or since previous commit
          if git tag --list | grep -q "v${PREVIOUS_VERSION}"; then
            COMMITS=$(git log --oneline v${PREVIOUS_VERSION}..HEAD --pretty=format:"- %s (%h)" | head -20)
          else
            COMMITS=$(git log --oneline HEAD~10..HEAD --pretty=format:"- %s (%h)" | head -20)
          fi

          if [ -n "$COMMITS" ]; then
            echo "$COMMITS" >> RELEASE_NOTES.md
          else
            echo "- Version bump to v${VERSION}" >> RELEASE_NOTES.md
          fi

          echo "" >> RELEASE_NOTES.md
          echo "**Backend Version:** ${VERSION}" >> RELEASE_NOTES.md
          echo "**Release Date:** $(date +'%Y-%m-%d')" >> RELEASE_NOTES.md

          # Output the changelog content for the release
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        run: |
          VERSION="v${{ needs.check-version-change.outputs.new-version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a $VERSION -m "Release $VERSION"
          git push origin $VERSION

      - name: Create Release Archive
        run: |
          cd backend
          tar -czf ../backend-build-v${{ needs.check-version-change.outputs.new-version }}.tar.gz dist/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version-change.outputs.new-version }}
          name: Release v${{ needs.check-version-change.outputs.new-version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(needs.check-version-change.outputs.new-version, 'alpha') || contains(needs.check-version-change.outputs.new-version, 'beta') || contains(needs.check-version-change.outputs.new-version, 'rc') }}
          files: |
            backend-build-v${{ needs.check-version-change.outputs.new-version }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [check-version-change, create-release]
    if: always() && needs.check-version-change.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Release notification
        run: |
          if [ "${{ needs.create-release.result }}" == "success" ]; then
            echo "✅ Successfully created release v${{ needs.check-version-change.outputs.new-version }}"
          else
            echo "❌ Failed to create release v${{ needs.check-version-change.outputs.new-version }}"
            exit 1
          fi
