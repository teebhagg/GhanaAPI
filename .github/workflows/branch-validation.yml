name: Branch Name Validation

on:
  push:
    branches-ignore:
      - main
      - master
      - develop
  create:
  workflow_dispatch:
    inputs:
      branch_name:
        description: "Branch name to validate (leave empty to validate current branch)"
        required: false
        type: string

permissions:
  contents: read
  checks: write

jobs:
  validate-branch-name:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get branch name
        id: branch-info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.branch_name }}" ]; then
            BRANCH_NAME="${{ github.event.inputs.branch_name }}"
            echo "Using provided branch name: $BRANCH_NAME"
          elif [ "${{ github.event_name }}" = "create" ] && [ "${{ github.event.ref_type }}" = "branch" ]; then
            BRANCH_NAME="${{ github.event.ref }}"
            echo "Validating newly created branch: $BRANCH_NAME"
          else
            BRANCH_NAME="${{ github.ref_name }}"
            echo "Validating current branch: $BRANCH_NAME"
          fi

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Validate branch name
        id: validation
        run: |
          BRANCH_NAME="${{ steps.branch-info.outputs.branch_name }}"
          echo "🔍 Validating branch name: $BRANCH_NAME"

          # Load validation rules from config file or use defaults
          if [ -f ".github/branch-naming-rules.json" ]; then
            echo "📄 Loading custom branch naming rules..."
            # For now, we'll use built-in rules, but this allows for future customization
          fi

          # Define comprehensive branch naming patterns
          # Check for double hyphens first (always invalid)
          if [[ $BRANCH_NAME =~ -- ]]; then
            echo "❌ Branch name contains double hyphens which are not allowed"
            echo "validation_result=invalid" >> $GITHUB_OUTPUT
            echo "branch_type=invalid" >> $GITHUB_OUTPUT
            echo "matched_pattern=" >> $GITHUB_OUTPUT
            echo "status_message=❌ Branch name contains double hyphens" >> $GITHUB_OUTPUT
            exit 0
          fi

          declare -A PATTERNS=(
            ["feature"]="^feature/[a-z0-9]+([a-z0-9-]*[a-z0-9]+)*$"
            ["bugfix"]="^bugfix/[a-z0-9]+([a-z0-9-]*[a-z0-9]+)*$"
            ["hotfix"]="^hotfix/[a-z0-9]+([a-z0-9-]*[a-z0-9]+)*$"
            ["fix"]="^fix/[a-z0-9]+([a-z0-9-]*[a-z0-9]+)*$"
            ["chore"]="^chore/[a-z0-9]+([a-z0-9-]*[a-z0-9]+)*$"
            ["docs"]="^docs/[a-z0-9]+([a-z0-9-]*[a-z0-9]+)*$"
            ["refactor"]="^refactor/[a-z0-9]+([a-z0-9-]*[a-z0-9]+)*$"
            ["test"]="^test/[a-z0-9]+([a-z0-9-]*[a-z0-9]+)*$"
            ["ci"]="^ci/[a-z0-9]+([a-z0-9-]*[a-z0-9]+)*$"
            ["perf"]="^perf/[a-z0-9]+([a-z0-9-]*[a-z0-9]+)*$"
            ["style"]="^style/[a-z0-9]+([a-z0-9-]*[a-z0-9]+)*$"
            ["build"]="^build/[a-z0-9]+([a-z0-9-]*[a-z0-9]+)*$"
            ["release"]="^release/v[0-9]+\.[0-9]+\.[0-9]+.*$"
            ["version-bump"]="^version-bump/v[0-9]+\.[0-9]+\.[0-9]+.*$"
            ["dependabot"]="^dependabot/.*$"
            ["renovate"]="^renovate/.*$"
            ["github-actions"]="^github-actions/.*$"
          )

          # Additional allowed patterns for specific cases
          SPECIAL_PATTERNS=(
            "^[a-z]+/[A-Z]+-[0-9]+.*$"  # Jira-style: feature/PROJ-123-description
            "^[a-z]+/[0-9]+-.*$"        # Issue-based: feature/123-description
            "^draft/.*$"                # Draft branches
            "^experiment/.*$"           # Experimental branches
            "^poc/.*$"                  # Proof of concept branches
          )

          VALIDATION_RESULT="invalid"
          MATCHED_PATTERN=""
          BRANCH_TYPE=""
          SUGGESTIONS=()

          # Check against main patterns
          for type in "${!PATTERNS[@]}"; do
            pattern="${PATTERNS[$type]}"
            if [[ $BRANCH_NAME =~ $pattern ]]; then
              VALIDATION_RESULT="valid"
              MATCHED_PATTERN=$pattern
              BRANCH_TYPE=$type
              break
            fi
          done

          # If not matched, check special patterns
          if [ "$VALIDATION_RESULT" = "invalid" ]; then
            for pattern in "${SPECIAL_PATTERNS[@]}"; do
              if [[ $BRANCH_NAME =~ $pattern ]]; then
                VALIDATION_RESULT="valid"
                MATCHED_PATTERN=$pattern
                BRANCH_TYPE="special"
                break
              fi
            done
          fi

          # Generate suggestions if invalid
          if [ "$VALIDATION_RESULT" = "invalid" ]; then
            # Try to extract meaningful parts and suggest corrections
            if [[ $BRANCH_NAME =~ ^([a-zA-Z]+)[/_-](.*)$ ]]; then
              prefix="${BASH_REMATCH[1],,}"  # Convert to lowercase
              suffix="${BASH_REMATCH[2]}"
              
              # Normalize suffix
              normalized_suffix=$(echo "$suffix" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
              
              case $prefix in
                "feat"|"feature")
                  SUGGESTIONS+=("feature/$normalized_suffix")
                  ;;
                "bug"|"bugfix"|"fix")
                  SUGGESTIONS+=("bugfix/$normalized_suffix")
                  SUGGESTIONS+=("fix/$normalized_suffix")
                  ;;
                "doc"|"docs"|"documentation")
                  SUGGESTIONS+=("docs/$normalized_suffix")
                  ;;
                "test"|"tests")
                  SUGGESTIONS+=("test/$normalized_suffix")
                  ;;
                "refact"|"refactor")
                  SUGGESTIONS+=("refactor/$normalized_suffix")
                  ;;
                *)
                  SUGGESTIONS+=("feature/$normalized_suffix")
                  SUGGESTIONS+=("chore/$normalized_suffix")
                  ;;
              esac
            else
              # Generic suggestions
              clean_name=$(echo "$BRANCH_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
              SUGGESTIONS+=("feature/$clean_name")
              SUGGESTIONS+=("bugfix/$clean_name")
              SUGGESTIONS+=("chore/$clean_name")
            fi
          fi

          # Output results
          echo "validation_result=$VALIDATION_RESULT" >> $GITHUB_OUTPUT
          echo "branch_type=$BRANCH_TYPE" >> $GITHUB_OUTPUT
          echo "matched_pattern=$MATCHED_PATTERN" >> $GITHUB_OUTPUT

          if [ "$VALIDATION_RESULT" = "valid" ]; then
            echo "✅ Branch name '$BRANCH_NAME' is valid!"
            echo "✅ Type: $BRANCH_TYPE"
            echo "✅ Matches pattern: $MATCHED_PATTERN"
            echo "status_message=✅ Branch name follows naming convention ($BRANCH_TYPE)" >> $GITHUB_OUTPUT
          else
            echo "❌ Branch name '$BRANCH_NAME' is invalid!"
            echo "❌ Does not match any allowed patterns"
            echo ""
            echo "💡 Suggestions:"
            for suggestion in "${SUGGESTIONS[@]}"; do
              echo "  - $suggestion"
            done
            echo "status_message=❌ Branch name does not follow naming convention" >> $GITHUB_OUTPUT
            
            # Save suggestions for later use
            printf '%s\n' "${SUGGESTIONS[@]}" > suggestions.txt
          fi

      - name: Create validation report
        if: always()
        run: |
          BRANCH_NAME="${{ steps.branch-info.outputs.branch_name }}"
          RESULT="${{ steps.validation.outputs.validation_result }}"

          echo "# 🌿 Branch Name Validation Report" > validation_report.md
          echo "" >> validation_report.md
          echo "**Branch:** \`$BRANCH_NAME\`" >> validation_report.md
          echo "**Result:** ${{ steps.validation.outputs.status_message }}" >> validation_report.md
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> validation_report.md

          if [ "$RESULT" = "valid" ]; then
            echo "**Type:** ${{ steps.validation.outputs.branch_type }}" >> validation_report.md
            echo "**Pattern:** \`${{ steps.validation.outputs.matched_pattern }}\`" >> validation_report.md
          else
            echo "" >> validation_report.md
            echo "## 💡 Suggestions" >> validation_report.md
            echo "" >> validation_report.md
            echo "Consider renaming your branch to one of these:" >> validation_report.md
            echo "" >> validation_report.md
            
            if [ -f suggestions.txt ]; then
              while IFS= read -r suggestion; do
                echo "- \`$suggestion\`" >> validation_report.md
              done < suggestions.txt
            fi
          fi

          echo "" >> validation_report.md
          echo "## 📋 Branch Naming Guidelines" >> validation_report.md
          echo "" >> validation_report.md
          echo "### Standard Patterns" >> validation_report.md
          echo "" >> validation_report.md
          echo "| Type | Pattern | Example |" >> validation_report.md
          echo "|------|---------|---------|" >> validation_report.md
          echo "| Feature | \`feature/description\` | \`feature/user-authentication\` |" >> validation_report.md
          echo "| Bug Fix | \`bugfix/description\` | \`bugfix/login-issue\` |" >> validation_report.md
          echo "| Hot Fix | \`hotfix/description\` | \`hotfix/critical-security-patch\` |" >> validation_report.md
          echo "| Chore | \`chore/description\` | \`chore/update-dependencies\` |" >> validation_report.md
          echo "| Documentation | \`docs/description\` | \`docs/api-documentation\` |" >> validation_report.md
          echo "| Refactor | \`refactor/description\` | \`refactor/user-service\` |" >> validation_report.md
          echo "| Tests | \`test/description\` | \`test/unit-tests\` |" >> validation_report.md
          echo "| CI/CD | \`ci/description\` | \`ci/github-actions\` |" >> validation_report.md
          echo "" >> validation_report.md
          echo "### Special Patterns" >> validation_report.md
          echo "" >> validation_report.md
          echo "- \`release/v1.2.3\` - Release branches" >> validation_report.md
          echo "- \`version-bump/v1.2.3\` - Version bump branches" >> validation_report.md
          echo "- \`feature/PROJ-123-description\` - Jira ticket references" >> validation_report.md
          echo "- \`dependabot/*\` - Dependabot updates" >> validation_report.md
          echo "" >> validation_report.md
          echo "### Rules" >> validation_report.md
          echo "" >> validation_report.md
          echo "1. Use lowercase letters, numbers, and hyphens only" >> validation_report.md
          echo "2. Start and end with alphanumeric characters" >> validation_report.md
          echo "3. Use hyphens to separate words" >> validation_report.md
          echo "4. Keep descriptions concise but descriptive" >> validation_report.md
          echo "5. Avoid special characters except hyphens" >> validation_report.md

      #       - name: Upload validation report
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: branch-validation-report-${{ github.run_id }}
#           path: validation_report.md
#           retention-days: 30

#       - name: Set branch validation status
#         if: always()
#         uses: actions/github-script@v7
#         with:
#           script: |
#             const result = '${{ steps.validation.outputs.validation_result }}';
#             const message = '${{ steps.validation.outputs.status_message }}';

#             await github.rest.repos.createCommitStatus({
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               sha: context.sha,
#               state: result === 'valid' ? 'success' : 'failure',
#               target_url: `${context.payload.repository.html_url}/actions/runs/${context.runId}`,
#               description: message,
#               context: 'Branch Name Validation'
#             });

      - name: Fail if validation failed
        if: steps.validation.outputs.validation_result != 'valid'
        run: |
          echo "❌ Branch name validation failed!"
          echo ""
          echo "To rename your current branch, use:"
          echo "git branch -m new-branch-name"
          echo ""
          echo "Check the validation report for suggested names."
          exit 1
